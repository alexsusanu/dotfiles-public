# Shell functions
# Add this to your .bashrc or .zshrc: source ~/dotfiles/functions

# Create directory and cd into it
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Universal extractor
extract() {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2)   tar xjf "$1"     ;;
            *.tar.gz)    tar xzf "$1"     ;;
            *.bz2)       bunzip2 "$1"     ;;
            *.rar)       unrar x "$1"     ;;
            *.gz)        gunzip "$1"      ;;
            *.tar)       tar xf "$1"      ;;
            *.tbz2)      tar xjf "$1"     ;;
            *.tgz)       tar xzf "$1"     ;;
            *.zip)       unzip "$1"       ;;
            *.Z)         uncompress "$1"  ;;
            *.7z)        7z x "$1"        ;;
            *)           echo "'$1' cannot be extracted" ;;
        esac
    else
        echo "'$1' is not a file"
    fi
}

# DOC search function for PREDEFINED FOLDERS
docsearch() {
    local folders=("cli_md_to_parse" "lims_md_to_parse" "oracle_md_to_parse" "notes" "performance")

    # First: find files containing the search term
    local files=$(for folder in "${folders[@]}"; do grep -r -l "$1" ~/workspace/alexsusanu.github.io/$folder 2>/dev/null; done)

    # Then: use fzf to pick which file, with preview showing search matches highlighted
    local selected=$(echo "$files" | fzf --preview "rg --color=always -n -C 3 '$1' {}" --bind 'ctrl-u:preview-page-up,ctrl-d:preview-page-down' --with-nth=-1 --delimiter='/')
    [[ -n "$selected" ]] && vim "$selected"
}



# Code search function for CURRENT DIRECTORY AND SUBDIRECTORIES
codesearch() {
    if [[ -z "$1" ]]; then
        echo "Usage: codesearch <search_term>"
        return 1
    fi

    # Find files containing the search term in current directory and subdirectories
    local files=$(grep -r -l "$1" . 2>/dev/null | grep -v ".git/")

    if [[ -z "$files" ]]; then
        echo "No files found containing: $1"
        return 1
    fi

    # Use fzf to pick which file, with preview showing search matches
    local selected=$(echo "$files" | fzf --preview "rg --color=always -n -C 3 '$1' {}" --bind 'ctrl-u:preview-page-up,ctrl-d:preview-page-down' --with-nth=-1 --delimiter='/')
    [[ -n "$selected" ]] && vim "$selected"
}

# Vim workflow help function
vimrchelp() {
    cat << 'HELP'
üîß VIM WORKFLOW CHEAT SHEET (Your Current Setup)

üìÅ FILE NAVIGATION:
  :find filename        - Find & open file anywhere in project
  ,f filename<Tab>      - Your custom find mapping + tab completion
  :e path/to/file       - Open specific file path
  :e .                  - Browse current directory

üìã BUFFER MANAGEMENT:
  :ls                   - List all open files/buffers
  :b filename<Tab>      - Switch to buffer (tab completes)
  :b#                   - Switch to previous buffer
  :b1, :b2, :b3        - Switch to buffer number

üîç SEARCH ACROSS FILES:
  ,g search_term        - Search for text across all project files
  ,n                    - Next search result
  ,N                    - Previous search result
  ,l                    - Open search results list
  ,c                    - Close search results list

üîç SEARCH WITHIN FILE:
  /searchterm           - Search in current file
  n                     - Next match
  N                     - Previous match
  ,h                    - Clear search highlighting

ü™ü WINDOW NAVIGATION:
  Ctrl+h/j/k/l         - Move between split windows
  :sp filename         - Split horizontally
  :vsp filename        - Split vertically

üíæ QUICK ACTIONS:
  ,w                    - Quick save
  ,q                    - Quick quit
  ,y (visual mode)     - Copy to system clipboard
  ,p                    - Paste from system clipboard

üìù EXAMPLE WORKFLOW:
  1. vim                     # Start in project root
  2. :find config.js         # Find and open config file
  3. ,g function login       # Search for login functions
  4. ,n                      # Jump through matches
  5. :b config<Tab>          # Switch back to config
  6. ,w                      # Save

üí° PRO TIPS:
  - Tab completion works with :find and :b
  - Your search uses ripgrep (faster than grep)
  - Backup/undo files saved in ~/.vim/ directories
  - Trailing whitespace auto-removed on save
HELP
}


# Tmux Help Function for ~/.zshrc
# Based on your custom tmux.conf with Ctrl+A prefix

tmux_help() {
    echo
    echo "üñ•Ô∏è  Tmux Quick Reference (Prefix: Ctrl+A)"
    echo "========================================"
    echo

    case $1 in
        ""|"all")
            echo "üìã Common Commands:"
            echo "  split     - Split windows/panes"
            echo "  move      - Move between panes"
            echo "  windows   - Window management"
            echo "  session   - Session management"
            echo
            echo "üí° Use: tmux_help <command> for specific help"
            echo "üí° Your prefix key is Ctrl+A (not Ctrl+B)"
            ;;
        "split"|"panes")
            echo "‚úÇÔ∏è  Split Panes:"
            echo "  Ctrl+A |         # Split window horizontally (left|right)"
            echo "  Ctrl+A -         # Split window vertically (top/bottom)"
            echo "  Ctrl+A x         # Kill current pane"
            echo "  Ctrl+A z         # Toggle pane zoom (fullscreen current pane)"
            ;;
        "move"|"switch"|"navigate")
            echo "üîÄ Move Between Panes:"
            echo "  Alt+‚Üê           # Move to left pane (NO PREFIX needed)"
            echo "  Alt+‚Üí           # Move to right pane (NO PREFIX needed)"
            echo "  Alt+‚Üë           # Move to pane above (NO PREFIX needed)"
            echo "  Alt+‚Üì           # Move to pane below (NO PREFIX needed)"
            ;;
        "windows"|"window")
            echo "ü™ü Window Management:"
            echo "  Ctrl+A c         # Create new window"
            echo "  Ctrl+A n         # Next window"
            echo "  Ctrl+A p         # Previous window"
            echo "  Ctrl+A 0-9       # Switch to window number"
            echo "  Ctrl+A &         # Kill current window"
            echo "  Ctrl+A ,         # Rename current window"
            ;;
        "panes"|"pane")
            echo "ü™ü Pane Management:"
            echo "  Ctrl+A ,         # Rename current pane"
            ;;
        "session"|"sessions")
            echo "üì¶ Session Management:"
            echo "  tmux new -s name # Create new session with name"
            echo "  tmux ls          # List all sessions"
            echo "  tmux attach -t name # Attach to session"
            echo "  Ctrl+A d         # Detach from session"
            echo "  Ctrl+A s         # Switch between sessions"
            ;;
        "config"|"reload")
            echo "‚öôÔ∏è  Config & Reload:"
            echo "  Ctrl+A r         # Reload tmux config"
            echo "  ~/.tmux.conf     # Your config file location"
            ;;
        *)
            echo "‚ùì Available topics:"
            echo "  split, move, windows, session, config"
            echo
            echo "Usage: tmux_help <topic>"
            ;;
    esac
    echo
}

# Alias for shorter command
alias th='tmux_help'

# Vim Help Function for ~/.zshrc
# Based on your custom vimrc configuration

vim_help() {
    echo
    echo "üìù Vim Quick Reference (Your Custom Setup)"
    echo "=========================================="
    echo

    case $1 in
        ""|"all")
            echo "üìã Available Topics:"
            echo "  basic     - Basic movement and editing"
            echo "  files     - File operations and navigation"
            echo "  search    - Search and replace"
            echo "  windows   - Window/pane management"
            echo "  tree      - File explorer (built-in)"
            echo "  complete  - Code completion"
            echo "  custom    - Your custom shortcuts"
            echo
            echo "üí° Use: vim_help <topic> for specific help"
            echo "üí° Your leader key is ',' (comma)"
            ;;
        "basic"|"movement")
            echo "üöÄ Basic Movement & Editing:"
            echo "  h j k l              # Left, down, up, right"
            echo "  w b                  # Next word, previous word"
            echo "  0 $                  # Start of line, end of line"
            echo "  gg G                 # Top of file, bottom of file"
            echo "  5G                   # Go to line 5"
            echo "  i a o                # Insert before cursor, after cursor, new line below"
            echo "  x dd yy p            # Delete char, delete line, copy line, paste"
            echo "  u Ctrl+r             # Undo, redo"
            ;;
        "files"|"file")
            echo "üìÅ File Operations:"
            echo "  ,w                   # Quick save (:w)"
            echo "  ,q                   # Quick quit (:q)"
            echo "  :e filename          # Open/edit file"
            echo "  :find config.js      # Find file in project (recursive search)"
            echo "  :find *.py           # Find all Python files"
            echo "  ,f filename          # Quick find files"
            echo "  Ctrl+h/j/k/l         # Move between windows"
            ;;
        "search"|"find")
            echo "üîç Search Operations:"
            echo "  /pattern             # Search forward for pattern"
            echo "  ?pattern             # Search backward for pattern"
            echo "  n N                  # Next match, previous match"
            echo "  ,h                   # Clear search highlighting"
            echo "  ,g pattern           # Search across all files (uses ripgrep)"
            echo "  ,n ,N                # Next/previous search result across files"
            echo "  ,l                   # Open list of search results"
            echo "  ,c                   # Close search results list"
            ;;
        "windows"|"panes")
            echo "ü™ü Window Management:"
            echo "  Ctrl+h/j/k/l         # Move cursor between windows"
            echo "  :split               # Split window horizontally"
            echo "  :vsplit              # Split window vertically"
            echo "  Ctrl+w c             # Close current window"
            echo "  Ctrl+w o             # Close all other windows"
            echo "  Ctrl+w =             # Resize all windows equally"
            echo "  :vertical resize 30  # Resize current window to 30 columns"
            echo
            echo "üö´ Disabled (prevents accidental layout changes):"
            echo "  Ctrl+w x, r, H, J, K, L are disabled"
            ;;
        "tree"|"explorer")
            echo "üå≥ File Explorer (Built-in Netrw):"
            echo "  ,e                   # Toggle file explorer"
            echo "  vim .                # Open vim with file explorer"
            echo
            echo "üìÇ Inside File Explorer:"
            echo "  Enter                # Open file/folder"
            echo "  -                    # Go up one directory"
            echo "  D                    # Delete file"
            echo "  R                    # Rename file"
            echo "  %                    # Create new file"
            echo "  d                    # Create new directory"
            echo "  Ctrl+h/l             # Switch between explorer and file"
            ;;
        "complete"|"completion")
            echo "ü§ñ Code Completion:"
            echo "  Ctrl+n               # Next word completion"
            echo "  Ctrl+p               # Previous word completion"
            echo "  Ctrl+x Ctrl+o        # Smart completion (based on file type)"
            echo "  Ctrl+x Ctrl+f        # File name completion"
            echo "  Ctrl+x Ctrl+l        # Complete whole line"
            echo
            echo "üí° Start typing, then use above keys for suggestions"
            ;;
        "custom"|"shortcuts")
            echo "‚öôÔ∏è  Your Custom Shortcuts (Leader = ,):"
            echo "  ,w                   # Save file"
            echo "  ,q                   # Quit file"
            echo "  ,h                   # Clear search highlighting"
            echo "  ,e                   # Toggle file explorer"
            echo "  ,g pattern           # Search in all files"
            echo "  ,f filename          # Find files by name"
            echo "  ,n ,N                # Navigate search results"
            echo "  ,l                   # Open search results list"
            echo "  ,c                   # Close search results"
            echo "  ,y ,Y                # Copy to system clipboard (visual mode)"
            echo "  ,p ,P                # Paste from system clipboard"
            ;;
        *)
            echo "‚ùì Available topics:"
            echo "  basic, files, search, windows, tree, complete, custom"
            echo
            echo "Usage: vim_help <topic>"
            ;;
    esac
    echo
}

# Alias for shorter command
alias vh='vim_help'


# CLI Help Function for ~/.zshrc
# Add this to your ~/.zshrc file

cli_help() {
    echo
    echo "üöÄ CLI Tools Quick Reference"
    echo "=============================="
    echo

    case $1 in
        ""|"all")
            echo "üìã All Tools Overview:"
            echo "  fzf        - Fuzzy finder (Ctrl+R, Ctrl+T)"
            echo "  grep       - Fast text search (rg -i)"
            echo "  find       - Better file finder (fd)"
            echo "  cat        - Cat with syntax highlighting (bat)"
            echo "  ls/ll      - ls with colors and icons (eza)"
            echo "  tree       - Directory structure (eza --tree)"
            echo "  z          - Smart directory jumping"
            echo "  dust       - Visual disk usage"
            echo "  btop       - System monitor"
            echo "  lazygit    - Git TUI"
            echo "  ncdu       - Interactive disk usage"
            echo "  delta      - Beautiful git diffs"
            echo
            echo "üí° Use: cli_help <tool_name> for specific help"
            ;;
        "fzf")
            echo "üîç fzf - Fuzzy Finder"
            echo "  fzf                  # Search files in current directory"
            echo "  Ctrl+R               # Fuzzy search command history"
            echo "  Ctrl+T               # Fuzzy find files, paste path"
            echo "  Alt+C                # Fuzzy find directories, cd into it"
            ;;
        "rg"|"ripgrep"|"grep")
            echo "üîç rg/grep - Fast Search"
            echo "  grep 'function'      # Find 'function' in all files (case-insensitive)"
            echo "  grep 'todo'          # Find all TODO comments"
            echo "  rg 'error' --type js # Search only in JavaScript files"
            echo "  rg 'import' -A 3     # Show 3 lines after each match"
            echo "  rg 'class.*User'     # Use regex to find class definitions"
            ;;
        "fd"|"find")
            echo "üìÅ fd/find - Better Find"
            echo "  find config.js       # Find files named 'config.js'"
            echo "  find '*.py'          # Find all Python files"
            echo "  fd -t d node_modules # Find directories named 'node_modules'"
            echo "  fd -e js src/        # Find all .js files in src/ folder"
            echo "  fd -H .env           # Include hidden files like .env"
            ;;
        "bat"|"cat")
            echo "üìÑ bat/cat - Better Cat"
            echo "  cat script.py        # View Python file with syntax highlighting"
            echo "  cat README.md        # View markdown with formatting"
            echo "  bat -n config.js     # Show with line numbers"
            echo "  bat -A .env          # Show all characters (tabs, spaces, etc)"
            ;;
        "eza"|"ls"|"ll")
            echo "üìÇ eza/ls/ll - Better ls"
            echo "  ls                   # List files with colors and icons"
            echo "  ll                   # Long format with permissions, dates, sizes"
            echo "  ls src/              # List files in specific directory"
            echo "  eza --git            # Show git status (modified, staged, etc)"
            echo "  eza --sort=size      # Sort by file size"
            ;;
        "z"|"zoxide")
            echo "üöÄ z (zoxide) - Smart Directory Jumping"
            echo "  z workspace          # Jump to ~/workspace or any workspace folder"
            echo "  z dotfiles           # Jump to dotfiles directory"
            echo "  z proj web           # Match directories with both 'proj' and 'web'"
            echo "  zi                   # Interactive fuzzy directory picker"
            ;;
        "dust")
            echo "üíæ dust - Disk Usage"
            echo "  dust                 # See what's taking up space visually"
            echo "  dust ~/Downloads     # Check Downloads folder size"
            echo "  dust -d 3            # Show 3 levels deep max"
            echo "  dust -r              # Show largest files first"
            ;;
        "btop")
            echo "‚ö° btop - System Monitor"
            echo "  btop                 # Beautiful system monitor"
            echo "  q                    # Quit btop"
            echo "  m                    # Toggle memory view"
            echo "  p                    # Toggle process view"
            ;;
        "tree")
            echo "üå≥ tree - Directory Structure"
            echo "  tree                 # Show project structure (eza --tree)"
            echo "  tree -L 2            # Show only 2 levels deep (easier to read)"
            echo "  eza --tree -a        # Include hidden files (.git, .env, etc)"
            echo "  eza --tree -I node_modules # Ignore large folders"
            ;;
        "lazygit")
            echo "üîß lazygit - Git TUI"
            echo "  lazygit              # Visual git - see changes, stage, commit"
            echo "  Space                # Stage/unstage files"
            echo "  c                    # Commit staged changes"
            echo "  P                    # Push to remote"
            ;;
        "ncdu")
            echo "üíΩ ncdu - Interactive Disk Usage"
            echo "  ncdu                 # Navigate folders, see sizes interactively"
            echo "  ncdu ~/Downloads     # Browse Downloads folder"
            echo "  Enter                # Enter directory"
            echo "  d                    # Delete file/folder (be careful!)"
            ;;
        "delta")
            echo "üé® delta - Beautiful Git Diffs"
            echo "  git diff             # See changes with syntax highlighting"
            echo "  git log -p --oneline # View recent commits with diffs"
            echo "  git show HEAD        # Show last commit nicely formatted"
            echo "  git diff --cached    # See staged changes before commit"
            ;;
        *)
            echo "‚ùì Available tools:"
            echo "  fzf, grep, find, cat, ls, ll, tree, z, dust, btop, lazygit, ncdu, delta"
            echo
            echo "Usage: cli_help <tool_name>"
            echo "       cli_help all"
            ;;
    esac
    echo
}

# Alias for shorter command
alias ch='cli_help'


# GIT SETUP START ===============================

##### PUSH TO github gitlab codeberg gitea

gph3() {
    local branch=$(git branch --show-current)

    # Color definitions
    local GREEN='\033[0;32m'
    local BLUE='\033[0;34m'
    local YELLOW='\033[1;33m'
    local PURPLE='\033[0;35m'
    local RED='\033[0;31m'
    local NC='\033[0m'
    local LIME='\033[38;5;154m'

    git push github "$branch"
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}Everything up-to-date github${NC}"
    else
        echo -e "${RED}Push to github failed${NC}"
    fi

    git push gitlab "$branch"
    if [ $? -eq 0 ]; then
        echo -e "${BLUE}Everything up-to-date gitlab${NC}"
    else
        echo -e "${RED}Push to gitlab failed${NC}"
    fi

    git push codeberg "$branch"
    if [ $? -eq 0 ]; then
        echo -e "${YELLOW}Everything up-to-date codeberg${NC}"
    else
        echo -e "${RED}Push to codeberg failed${NC}"
    fi

    git push gitea "$branch"
    if [ $? -eq 0 ]; then
        echo -e "${PURPLE}Everything up-to-date gitea${NC}"
    else
        echo -e "${RED}Push to gitea failed${NC}"
    fi

    # git status, pull, push again github/main
    git branch --set-upstream-to=github/main
    if [ $? -eq 0 ]; then
        echo -e "${LIME}UPSTREAM SET TO GIHTUB/MAIN${NC}"
    else
        echo -e "${RED}Setting upstream failed${NC}"
    fi
}

###### create and push initial repo to 2

create3repo() {
    if [ $# -eq 0 ]; then
        echo "Usage: create_and_push_repo <repo_name>"
        return 1
    fi

    repo_name="$1"

    # Initialize a new Git repository
    echo "# ${repo_name%.*}" >> README.md
    git init
    git add README.md
    git commit -m "first commit"
    git branch -M main

    # Add GitHub remote
    git remote add github "git@github.com:alexsusanu/$repo_name"
    git push -u github main

    # Add GitLab remote
    git remote add gitlab "git@gitlab.com:alexsusanu/$repo_name"
    git push --set-upstream gitlab --all
    git push --set-upstream gitlab --tags

    # Add Gitea remote
    git remote add gitea "git@gitea.com:alexsusanu/$repo_name"
    git push -u github main

    # Add Codeberg remote
    git remote add codeberg "ssh://git@codeberg.org/littledino/$repo_name"
    git push -u origin main

}
# GIT SETUP STOP ===============================

# quick git push option, just current date and push
# checks the upstream, default usually origin/github but in case I push to others
backup() {
    git add . && git commit -m "backup $(date '+%Y-%m-%d %H:%M')" && git push

    # Get the first remote (usually origin)
    local remote=$(git remote | head -n1)
    git branch --set-upstream-to=$remote/main
    if [ $? -eq 0 ]; then
      echo -e "${LIME}UPSTREAM SET TO $remote/MAIN${NC}"
    else
      echo -e "${RED}Setting upstream failed${NC}"
    fi
}


capture_date() {
    datetime=$(date -v -2H +"%Y-%m-%dT%H:%M:%S")
    echo -n $datetime | pbcopy
    echo "Copied $datetime to clipboard"
}
